// <auto-generated />
using System;
using KelimeDefteri.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KelimeDefteri.Migrations
{
    [DbContext(typeof(DefterDB))]
    partial class DefterDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("KelimeDefteri.Models.GunlukKayit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("GunlukKayitlar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            date = new DateTime(2022, 10, 5, 11, 9, 22, 944, DateTimeKind.Local).AddTicks(111)
                        });
                });

            modelBuilder.Entity("KelimeDefteri.Models.Kelime", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("GunlukKayitID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GunlukKayitID");

                    b.ToTable("Kelimeler");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            GunlukKayitID = 1,
                            Name = "Kelime"
                        },
                        new
                        {
                            Id = 2L,
                            GunlukKayitID = 1,
                            Name = "Nutuk"
                        },
                        new
                        {
                            Id = 3L,
                            GunlukKayitID = 1,
                            Name = "Hamaset"
                        },
                        new
                        {
                            Id = 4L,
                            GunlukKayitID = 1,
                            Name = "Lafebesi"
                        });
                });

            modelBuilder.Entity("KelimeDefteri.Models.Tanim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Aciklama")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AciklamaTuru")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("KelimeID")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("KelimeID");

                    b.ToTable("Tanimlar");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Aciklama = "Anlamlı ses veya ses birliği, söz, sözcük, lügat",
                            AciklamaTuru = "isim",
                            KelimeID = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Aciklama = "Söz, konuşma",
                            AciklamaTuru = "isim",
                            KelimeID = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Aciklama = "Söylev",
                            AciklamaTuru = "isim",
                            KelimeID = 2L
                        },
                        new
                        {
                            Id = 4L,
                            Aciklama = "Yiğitlik, kahramanlık, cesaret",
                            AciklamaTuru = "isim, eskimiş",
                            KelimeID = 3L
                        },
                        new
                        {
                            Id = 5L,
                            Aciklama = "Dinleyenleri etkilemek veya heyecanlandırmak amacıyla yapılan abartılı anlatım",
                            AciklamaTuru = "isim, eskimiş",
                            KelimeID = 3L
                        },
                        new
                        {
                            Id = 6L,
                            Aciklama = "Çok konuşan, herkese laf yetiştiren kimse, dil ebesi, söz ebesi",
                            AciklamaTuru = "isim, mecaz",
                            KelimeID = 4L
                        });
                });

            modelBuilder.Entity("KelimeDefteri.Models.Kelime", b =>
                {
                    b.HasOne("KelimeDefteri.Models.GunlukKayit", null)
                        .WithMany("Kelimeler")
                        .HasForeignKey("GunlukKayitID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KelimeDefteri.Models.Tanim", b =>
                {
                    b.HasOne("KelimeDefteri.Models.Kelime", null)
                        .WithMany("Tanimlar")
                        .HasForeignKey("KelimeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KelimeDefteri.Models.GunlukKayit", b =>
                {
                    b.Navigation("Kelimeler");
                });

            modelBuilder.Entity("KelimeDefteri.Models.Kelime", b =>
                {
                    b.Navigation("Tanimlar");
                });
#pragma warning restore 612, 618
        }
    }
}
